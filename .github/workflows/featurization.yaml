name: FeaturizationWorker

on: 
  issue_comment:
    types: [created]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v4

    - name: Respond to comment
      uses: actions/github-script@v5
      with:
        script: |
          const issueComment = context.payload.comment;
          const issue = context.issue;
          const regex = /(https:\/\/[^\s]+\.zip)/g;
          const matches = issueComment.body.match(regex);

          let message;
          if (matches && matches.length > 0) {
            message = 'üëç [1/3] I found a ZIP file linked in your comment. I will now attempt to download it and validate contents.';
          } else {
            message = 'üò¢ Your comment does not contain any direct links to ZIP files. Please note that certain cloud providers do not support that. Try to directly drag-and-drop into a comment.';
          }

          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });

          return matches ? matches[0] : null;
          
    - name: Download attachment
      id: download
      run: |
        if [ -n "${{ steps.respond.outputs.result }}" ]; then
          curl -O ${{ steps.respond.outputs.result }} || echo "::set-output name=downloaded::false"
        fi
    - name: Send message if download failed
      uses: actions/github-script@v5
      if: steps.download.outputs.downloaded == 'false'
      with:
        script: |
          const issue = context.issue;
          const message = 'üò¢ Could not download the linked ZIP file.';

          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });

    - name: Unzip file
      if: steps.respond.outputs.result != ''
      run: |
        mkdir -p structures
        unzip "${{ steps.respond.outputs.result }}" -d structures
        
    - name: Verify file extensions
      id: verify
      run: |
        shopt -s nocasematch
        for file in structures/*; do
          extension="${file##*.}"
          if [[ "$extension" != "poscar" && "$extension" != "cif" && "$extension" != "vasp" ]]; then
            echo "::set-output name=valid::false"
            break
          fi
        done
        
    - name: Send message if file extensions are invalid
      uses: actions/github-script@v5
      if: steps.verify.outputs.valid == 'false'
      with:
        script: |
          const issue = context.issue;
          const message = 'üò¢ The files supplied in ZIP do not have one of the required extensions: `poscar`, `cif`, or `vasp`.';

          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
        cache-dependency-path: 'featurization/requirements.txt'

    - name: Install dependencies
      run: |
        python -m pip install -r featurization/requirements.txt

    - name: Test that pysipfenn is available
      run: python -c "import pysipfenn; c = pysipfenn.Calculator()"
