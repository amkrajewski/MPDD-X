name: FeaturizationWorker

on: 
  issue_comment:
    types: [created]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v4

    - name: Respond to comment
      uses: actions/github-script@v5
      id: respond
      with:
        script: |
          const fs = require('fs');
          const issueComment = context.payload.comment;
          const issue = context.issue;
          const regex = /(https:\/\/[^\s]+\.zip)\b/g;
          const matches = issueComment.body.match(regex);
    
          console.log('Matches:', matches);
    
          let message;
          if (matches && matches.length > 0) {
            message = 'üëç [1/3] I found a ZIP file linked in your comment. I will now attempt to download it and validate contents.';
            fs.writeFileSync('match.txt', matches[0]);
          } else {
            message = 'üò¢ Your comment does not contain any direct links to ZIP files. Please note that certain cloud providers do not support that. Try to directly drag-and-drop into a comment.';
            fs.writeFileSync('match.txt', 'false');
          }
    
          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });

    - name: Download file
      id: download
      run: |
        file=$(cat match.txt)
        file=$(echo $file | sed 's/\.zipLICENSE/\.zip/g')
        echo $file
        wget -O task.zip $file || echo "::set-output name=failed::true"
        
    - name: Send message if download failed
      uses: actions/github-script@v5
      if: steps.download.outputs.failed == 'true'
      with:
        script: |
          const issue = context.issue;
          const message = 'üò¢ Could not download the task files. Exiting now...';

          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });

    - name: Unzip file
      if: steps.download.outputs.failed != 'true'
      run: |
        mkdir -p structures
        ls
        unzip task.zip -d structures
        cd structures
        rm -rf __MACOSX
        ls
        
    - name: Verify file extensions
      if: steps.download.outputs.failed != 'true'
      id: verify
      run: |
        shopt -s nocasematch
        if [ ! -d "structures" ]; then
           echo "structures directory does not exist"
           echo "valid=false" >> $GITHUB_ENV
           exit 0
        fi
        if [ -z "$(ls -A structures)" ]; then
           echo "No files found in structures directory"
           echo "valid=false" >> $GITHUB_ENV
           exit 0
        fi
        for file in structures/*; do
          extension="${file##*.}"
          if [[ "$extension" != "poscar" && "$extension" != "cif" && "$extension" != "vasp" ]]; then
            echo "Invalid file extension: $file"
            echo "valid=false" >> $GITHUB_ENV
            exit 0
          fi
        done
        echo "valid=true" >> $GITHUB_ENV
        
    - name: Send message if file extensions are invalid
      uses: actions/github-script@v5
      if: env.valid == 'false' && steps.download.outputs.failed != 'true'
      with:
        script: |
          const issue = context.issue;
          const message = 'üò¢ The files supplied in ZIP do not have one of the required extensions: `poscar`, `cif`, or `vasp`.';

          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      if: env.valid == 'true'
      with:
        python-version: "3.11"
        cache: 'pip'
        cache-dependency-path: 'featurization/requirements.txt'

    - name: Install dependencies
      if: env.valid == 'true'
      run: |
        python -m pip install -r featurization/requirements.txt

    - name: Python set
      if: env.valid == 'true'
      uses: actions/github-script@v5
      with:
        script: |
          const issue = context.issue;
          const message = 'üëç [2/3] I received your files, extracted them, and set up the calculation environment! Please wait for results.';

          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });

    - name: Run pySIPFENN with NN30
      if: env.valid == 'true'
      run: |
        python featurization/pySIPFENN-minimal.py

    - name: Run another step if Python step fails
      if: failure()
      uses: actions/github-script@v5
      with:
        script: |
          const issue = context.issue;
          const message = 'üò¢ Something went wrong at the calculation step...';

          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });

    - name: Upload file as artifact
      if: env.valid == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: descriptor-artifact
        path: descriptorData.npy

    - name: Report results
      if: env.valid == 'true'
      uses: actions/github-script@v5
      with:
        script: |
          const fs = require('fs');
          const issue = context.issue;
          const fileContent = fs.readFileSync('response.md', 'utf8');
          const message = `üöÄ [3/3] All Done! Obtained results are in the table below: \n\n${fileContent}`;

          const artifactUrl = `https://github.com/${issue.owner}/${issue.repo}/actions/runs/${process.env.GITHUB_RUN_ID}`;

          message += `\nFor some time, you can also download the raw descriptor data array [as an Artifact here](${artifactUrl})`;
          message += `\nEnjoy!`
    
          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });
