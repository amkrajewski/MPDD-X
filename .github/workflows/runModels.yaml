name: FeaturizationWorker

on: 
  issue_comment:
    types: [created]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v4

    - name: Verify issue is not ENH, BUG, or FIX
      uses: actions/github-script@v7
      with:
        script: |
          const issueNumber = context.issue.number;
          const issue = await github.rest.issues.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
          });
          const title = issue.data.title;
          if (title.includes('[ENH]') || title.includes('[BUG]') || title.includes('[FIX]')) {
            console.log('Issue title contains [ENH], [BUG], or [FIX], cancelling workflow');
            const { owner, repo } = context.repo;
            const runId = context.runId;
            await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id: runId });
          }

    - name: Respond to comment
      uses: actions/github-script@v7
      id: respond
      with:
        script: |
          const fs = require('fs');
          const issueComment = context.payload.comment;
          const issue = context.issue;
          const regex = /(https:\/\/[^\s]+\.zip)\b/g;
          const matches = issueComment.body.match(regex);
    
          console.log('Matches:', matches);
    
          let message;
          if (matches && matches.length > 0) {
            message = 'üëç [1/3] I found the ZIP file linked in your comment. I will now attempt to download it and validate contents!';
            fs.writeFileSync('match.txt', matches[0]);
          } else {
            message = 'üò¢ Your comment does not contain any direct links to ZIP files. Please note that certain cloud providers do not support that. Try to directly drag-and-drop into a comment.';
            fs.writeFileSync('match.txt', 'false');
          }
    
          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });

    - name: Download file
      id: download
      run: |
        file=$(cat match.txt)
        file=$(echo $file | sed 's/\.zipLICENSE/\.zip/g')
        echo $file | tee log.txt
        wget -O task.zip $file || echo "::set-output name=failed::true"
        
    - name: Send message if download failed
      uses: actions/github-script@v7
      if: steps.download.outputs.failed == 'true'
      with:
        script: |
          const issue = context.issue;
          const message = 'üò¢ I could not download the task ZIP file. Exiting now...';

          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });

    - name: Unzip file
      if: steps.download.outputs.failed != 'true'
      run: |
        mkdir -p structures_in
        mkdir -p structures
        mkdir -p structures_relaxed
        unzip task.zip -d structures_in
        find ./structures_in -type f -exec mv -i {} ./structures \;
        find ./structures -type f -name ".*" -delete
        ls -A structures | tee log.txt
        
    - name: Verify file extensions
      if: steps.download.outputs.failed != 'true'
      id: verify
      run: |
        shopt -s nocasematch
        if [ ! -d "structures" ]; then
           echo "structures directory does not exist"
           echo "valid=false" >> $GITHUB_ENV
           exit 0
        fi
        if [ -z "$(ls -A structures)" ]; then
           echo "No files found in structures directory"
           echo "valid=false" >> $GITHUB_ENV
           exit 0
        fi
        for file in structures/*; do
          extension="${file##*.}"
          if [[ "$extension" != "poscar" && "$extension" != "cif" && "$extension" != "vasp" ]]; then
            echo "Invalid file extension: $file"
            echo "valid=false" >> $GITHUB_ENV
            exit 0
          fi
        done
        echo "valid=true" >> $GITHUB_ENV
        
    - name: Send message if file extensions are invalid
      uses: actions/github-script@v7
      if: env.valid == 'false' && steps.download.outputs.failed != 'true'
      with:
        script: |
          const issue = context.issue;
          const message = 'üò¢ The files supplied in ZIP do not have one of the required extensions: `CIF` or `POSCAR` (or `VASP`). If you need another format to work, let us know!';

          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      if: env.valid == 'true'
      with:
        python-version: "3.11"
        cache: 'pip'
        cache-dependency-path: 'featurization/requirements.txt'
        
    - name: Python set
      if: env.valid == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.issue;
          const message = 'üëç [2/3] I received your files and extracted them! Now, I will set up the calculation environment and run: `pySIPFENN`, `CHGNet`, and `ALIGNN`. \nYou can now have A coffee and wait for results. Obtaining results should take at least a couple of minutes.';

          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });

    - name: Install dependencies
      if: env.valid == 'true'
      run: |
        python -m pip install torch==2.1.0 torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu | tee log.txt
        python -m pip install -r featurization/requirements.txt | tee log.txt
        python -m pip install git+https://github.com/amkrajewski/chgnet | tee log.txt
        python -m pip install git+https://gitlab.com/ase/ase#bdd046c27 | tee log.txt

    - name: Run pySIPFENN with NN30
      if: env.valid == 'true'
      run: |
        python featurization/pysipfenn-minimal.py | tee log.txt

    - name: Run another step if Python step fails
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.issue;
          const message = 'üò¢ Something went wrong at the pySIPFENN calculation step...\nYou can see logs under Actions tab.';

          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });

    - name: Run MPDD-ALIGNN with 7 default models
      if: env.valid == 'true'
      run: |
        python featurization/alignn-minimal.py | tee log.txt
    
    - name: Run another step if Python step fails
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.issue;
          const message = 'üò¢ Something went wrong at the ALIGNN calculation step...\nYou can see logs under Actions tab.';

          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });

    - name: Run CHGNet v0.3.0 and their relaxation
      if: env.valid == 'true'
      run: |
        python featurization/chgnet-minimal.py | tee log.txt
        zip -r -9 structures_relaxed.zip structures_relaxed | tee log.txt

    - name: Run another step if Python step fails
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.issue;
          const message = 'üò¢ Something went wrong at the CHGNet calculation step...\nYou can see logs under Actions tab.';

          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });

    - name: Upload file as artifact
      if: env.valid == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: pySIPFENN-descriptorData.npy
        path: descriptorData.npy

    - name: Upload file as artifact
      if: env.valid == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: pySIPFENN-descriptorData.csv
        path: descriptorData.csv

    - name: Upload file as artifact
      if: env.valid == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: pySIPFENN-results.csv
        path: results.csv

    - name: Upload file as artifact
      if: env.valid == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: CHGNet-structures_relaxed.zip
        path: structures_relaxed.zip

    - name: ZIP all files
      if: env.valid == 'true'
      run: |
        issue_number=${{ github.event.issue.number }}
        random_string=$(cat /dev/urandom | base64 | tr -dc '0-9a-zA-Z' | head -c20)
        issue_number="${issue_number}_${random_string}"
        zip -6 "contributions/contrib_${issue_number}.zip" structures structures_relaxed response_pySIPFENN.md response_ALIGNN.md response_CHGNet.md descriptorData.npy results.csv log.txt
    
    - name: Commit changes with Add & Commit
      id: commit
      uses: EndBug/add-and-commit@v9
      with:
        message: '(automatic) Contribution Persisted'
        add: "contributions/*.zip"

    - name: Get commit hash
      id: gethash
      run: echo "::set-output name=hash::$(git rev-parse HEAD)"
    
    - name: Print commit hash
      run: echo "The commit hash is ${{ steps.gethash.outputs.hash }}"

    - name: Report results
      if: env.valid == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const issue = context.issue;
          const full_commit_hash = "${{ steps.gethash.outputs.hash }}";
          const commit_hash = full_commit_hash.substring(0, 8);
          const fileContent1 = fs.readFileSync('response_pySIPFENN.md', 'utf8');
          const fileContent2 = fs.readFileSync('response_ALIGNN.md', 'utf8');
          const fileContent3 = fs.readFileSync('response_CHGNet.md', 'utf8');
          
          let message = `üöÄ [3/3] All Done!\n Your submission and all results been persisted under [contrib.mpdd.org/${commit_hash}](https://contrib.mpdd.org/${commit_hash}). For results, please see the table below: \n\n**pySIPFENN:**\n${fileContent1}`;
          message += `\n\n**ALIGNN:**\n${fileContent2}`;
          message += `\n\n**CHGNet:**\n${fileContent3}`;

          const artifactUrl = `https://github.com/${issue.owner}/${issue.repo}/actions/runs/${process.env.GITHUB_RUN_ID}`;

          message += `\n**For the next 30 days, you can also download other results like pySIPFENN's raw descriptor data Numpy array and CHGNet-relaxed structure files** [**under Artifact tab here**](${artifactUrl})`;
          message += `\nEnjoy!`
    
          github.rest.issues.createComment({
            owner: issue.owner,
            repo: issue.repo,
            issue_number: issue.number,
            body: message
          });
